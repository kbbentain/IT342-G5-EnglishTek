openapi: 3.0.3
info:
  title: EnglishTek API
  description: |
    EnglishTek API for user management, authentication, and learning content.
    
    This API provides endpoints for:
    - User registration and authentication
    - OAuth2 authentication with Google
    - File management
    - Role-based access control
  contact:
    name: EnglishTek Support
    email: support@englishtek.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local Development Server

tags:
  - name: Authentication
    description: Authentication management APIs
  - name: OAuth2 Authentication
    description: OAuth2 authentication endpoints
  - name: Files
    description: File management APIs
  - name: Test
    description: Test endpoints for authentication verification

paths:
  /api/v1/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account with USER role
      operationId: register
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input or username/email already exists

  /api/v1/auth/register-admin:
    post:
      tags:
        - Authentication
      summary: Register a new admin
      description: Creates a new user account with ADMIN role
      operationId: registerAdmin
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '200':
          description: Admin registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input or username/email already exists

  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticates a user and returns JWT token
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid username or password

  /oauth2/authorization/google:
    get:
      tags:
        - OAuth2 Authentication
      summary: Initiate Google OAuth2 authentication
      description: Redirects the user to Google for authentication
      operationId: initiateGoogleAuth
      responses:
        '302':
          description: Redirect to Google authentication page

  /api/v1/auth/oauth2/failure:
    get:
      tags:
        - OAuth2 Authentication
      summary: OAuth2 Failure
      description: Endpoint called after failed OAuth2 authentication
      operationId: handleOAuth2Failure
      responses:
        '200':
          description: Authentication failed response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Authentication failed

  /api/v1/auth/oauth2/user:
    get:
      tags:
        - OAuth2 Authentication
      summary: Get Current User
      description: Get the currently authenticated user's information
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    format: email
                    example: john.doe@example.com
                  picture:
                    type: string
                    format: uri
                    example: https://lh3.googleusercontent.com/a/profile-picture
        '401':
          description: Not authenticated
        '500':
          description: Not authenticated with OAuth2

  /api/v1/auth/oauth2/token:
    get:
      tags:
        - OAuth2 Authentication
      summary: Get JWT Token
      description: Get JWT token for the authenticated user
      operationId: getToken
      security:
        - bearerAuth: []
      responses:
        '200':
          description: JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Not authenticated
        '500':
          description: Not authenticated with JWT

  /api/v1/files/{fileName}:
    get:
      tags:
        - Files
      summary: Get file
      description: Retrieves a file by filename
      operationId: getFile
      parameters:
        - name: fileName
          in: path
          description: Name of the file to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File retrieved successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: File not found

  /api/v1/test/public:
    get:
      tags:
        - Test
      summary: Public endpoint
      description: This endpoint is accessible without authentication
      operationId: publicEndpoint
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: This is a public endpoint that doesn't require authentication

  /api/v1/test/authenticated:
    get:
      tags:
        - Test
      summary: Authenticated endpoint
      description: This endpoint requires authentication
      operationId: authenticatedEndpoint
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: This endpoint requires authentication
                  username:
                    type: string
                    example: john.doe@example.com
                  authorities:
                    type: array
                    items:
                      type: string
                    example: ["ROLE_USER"]
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /api/v1/test/admin:
    get:
      tags:
        - Test
      summary: Admin endpoint
      description: This endpoint requires ADMIN role
      operationId: adminEndpoint
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: This endpoint requires ADMIN role
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Requires ADMIN role

  /api/v1/test/user:
    get:
      tags:
        - Test
      summary: User endpoint
      description: This endpoint requires USER role
      operationId: userEndpoint
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: This endpoint requires USER role
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Requires USER role

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: password123
        name:
          type: string
          example: John Doe
        bio:
          type: string
          example: Software engineer with 5 years of experience
        avatar:
          type: string
          format: binary
          description: User profile image

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: password123

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        role:
          type: string
          enum: [USER, ADMIN]
          example: USER

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT auth description

security:
  - bearerAuth: []
